import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "org.jetbrains.intellij" version "1.13.3"
    id "org.jetbrains.kotlin.jvm" version "1.9.10"
    id "com.github.ben-manes.versions" version "0.39.0"
    id "io.freefair.aspectj.post-compile-weaving" version "6.5.1"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

processResources {
    filesMatching('ApplicationInsights.xml') {
        filter(ReplaceTokens, tokens: ["applicationinsights.key": project.property("applicationinsights.key")])
    }
}

intellij {
    pluginName = 'azure-toolkit-for-intellij'
    version = intellij_version
    updateSinceUntilBuild = Boolean.valueOf(updateVersionRange)
    plugins = ['java', 'maven', 'maven-model', 'gradle', dep_plugins, "properties", 'terminal', 'gradle-java', 'org.intellij.plugins.markdown']
    downloadSources = Boolean.valueOf(sources)
}

sourceSets {
    main {
        java.srcDirs 'src/main/java'
        kotlin.srcDirs 'src/main/kotlin'
        resources {
            srcDir 'src/main/resources'
            exclude 'bundle/**'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        kotlin.srcDirs 'src/test/kotlin'
        resources {
            srcDir 'src/test/resources'
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.freefair.aspectj.post-compile-weaving'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.jetbrains.intellij'

    group = 'com.microsoft.azuretools'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    processResources {
        duplicatesStrategy(DuplicatesStrategy.WARN)
    }

    sourceSets {
        main {
            java.srcDirs 'src/main/java'
            resources {
                srcDir 'src/main/resources'
                exclude 'bundle/**'
            }
        }
        test {
            java.srcDir 'src/test/java'
            resources {
                srcDir 'src/test/resources'
            }
        }
    }

    compileKotlin {
        kotlinOptions.jvmTarget = javaVersion
        ajc {
            enabled = false
        }
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = javaVersion
        ajc {
            enabled = false
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom 'com.microsoft.azure:azure-toolkit-libs:0.39.2'
            mavenBom 'com.microsoft.azure:azure-toolkit-ide-libs:0.39.2'
            mavenBom 'com.microsoft.hdinsight:azure-toolkit-ide-hdinsight-libs:0.1.0'
        }
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.projectlombok/lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'com.microsoft.azure:azure-toolkit-common-lib'
        aspect "com.microsoft.azure:azure-toolkit-common-lib"
        compileOnly 'org.jetbrains:annotations'
    }

    configurations {
        implementation.exclude module: 'slf4j-api'
        implementation.exclude module: 'log4j'
        implementation.exclude module: 'stax-api'
        implementation.exclude module: 'groovy-xml'
        implementation.exclude module: 'groovy-templates'
        implementation.exclude module: 'jna'
        implementation.exclude module: 'xpp3'
        implementation.exclude module: 'pull-parser'
        implementation.exclude module: 'xsdlib'
        cucumberRuntime {
            extendsFrom testImplementation
        }
    }

    intellij {
        version = intellij_version
    }
}

dependencies {
    implementation project(path: ':azure-intellij-plugin-lib-java', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-resource-connector-lib-java', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-service-explorer', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-guidance-java', configuration: 'instrumentedJar')
    implementation project(path: ':azure-sdk-reference-book', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-springcloud', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-storage', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-appservice-java', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-arm', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-applicationinsights', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-cosmos', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-cognitiveservices', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-monitor', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-containerregistry', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-containerservice', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-containerapps', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-database-java', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-vm', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-redis', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-bicep', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-eventhubs', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-servicebus', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-keyvault', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-resource-connector-aad', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-hdinsight-lib', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-sqlserverbigdata', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-hdinsight', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-synapse', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-sparkoncosmos', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-hdinsight-base', configuration: 'instrumentedJar')

    implementation 'commons-io:commons-io'
    implementation 'org.apache.commons:commons-lang3'
}

subprojects {
    buildPlugin { enabled = false }
    runIde { enabled = false }
    prepareSandbox { enabled = false }
    prepareTestingSandbox { enabled = false }
    buildSearchableOptions { enabled = false }
    patchPluginXml { enabled = false }
    publishPlugin { enabled = false }
    verifyPlugin { enabled = false }

    buildSearchableOptions.onlyIf { false }
}

buildSearchableOptions.onlyIf { false }

defaultTasks 'buildPlugin'

wrapper() {
    gradleVersion = '7.5.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

//apply plugin: BundleBuildIDEAPlugin

//installIdea.dependsOn buildPlugin
//installIdea.dependsOn checkstyleMain
String timestamp = (new Date()).format('yyyyMMddHHmmss')
ext.getPatchedVersion = {
    if (Boolean.valueOf(needPatchVersion) || pluginVersion.endsWith("SNAPSHOT")) {
        if (pluginVersion.endsWith("SNAPSHOT")) {
            def fixedPluginVersion = pluginVersion.split("-")
            return "${fixedPluginVersion[0]}-${intellijDisplayVersion}-SNAPSHOT.${timestamp}"
        } else {
            return "${pluginVersion}-${intellijDisplayVersion}-BETA.${timestamp}"
        }
    } else {
        return "${pluginVersion}-${intellijDisplayVersion}"
    }
}

patchPluginXml {
    version = getPatchedVersion()
    sinceBuild = patchPluginXmlSinceBuild
}

task prepareBicepBinariesForSandbox(type: Copy) {
    def bicepBinariesDir = file("$projectDir/build/idea-sandbox/plugins/azure-toolkit-for-intellij/bicep")
    bicepBinariesDir.deleteDir()
    from("$projectDir/azure-intellij-plugin-bicep/binaries") into("$projectDir/build/idea-sandbox/plugins/azure-toolkit-for-intellij/")
}

task prepareJobViewResourceForSandbox(type: Copy) {
    from("$projectDir/azure-intellij-plugin-hdinsight/hdinsight_jobview_html") into("$projectDir/build/idea-sandbox/plugins/azure-toolkit-for-intellij/")
}

task downloadBicepLanguageServer(type: Copy) {
    def langServerDir = file('azure-intellij-plugin-bicep/binaries/bicep/bicep-langserver')
    if (!langServerDir.exists()) {
        logger.info('Downloading bicep language server ...')
        def zipFile = new File('azure-intellij-plugin-bicep/downloaded.zip')
        new URL('https://aka.ms/java-toolkit-bicep-ls').withInputStream { i -> zipFile.withOutputStream { it << i } }
        logger.info('Unzipping bicep language server ...')
        from zipTree(zipFile) into langServerDir
    }
}

buildPlugin {
    archiveVersion = getPatchedVersion()
    from("$projectDir/NOTICE")
    // buildPlugin zips result of `prepareSandbox`, so no need to copy again?
    // copy bicep textmate bundles/language server files to root of the plugin zip, so that we don't need to unzip them manually from jar resources
    //    from("$projectDir/azure-intellij-plugin-bicep/binaries")
}

prepareSandbox {
    dependsOn(downloadBicepLanguageServer)
    finalizedBy(prepareJobViewResourceForSandbox)
    finalizedBy(prepareBicepBinariesForSandbox)
}

runIde {
    jvmArgs("-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005")
}
