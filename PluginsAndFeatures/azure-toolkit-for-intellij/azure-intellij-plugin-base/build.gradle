plugins {
    id "org.jetbrains.intellij" version "1.13.3"
    id "org.jetbrains.kotlin.jvm" version "1.7.20"
    id "de.undercouch.download" version "4.1.1"
    id "com.github.ben-manes.versions" version "0.39.0"
    id "io.freefair.aspectj.post-compile-weaving" version "6.5.1"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.freefair.aspectj.post-compile-weaving'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.jetbrains.intellij'

    group = 'com.microsoft.azure.toolkit'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    sourceSets {
        main {
            java.srcDirs 'src/main/java'
            resources {
                srcDir 'src/main/resources'
            }
        }
        test {
            java {
                srcDir 'src/test/java'
            }
            resources {
                srcDir 'src/test/resources'
            }
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    ext {
        azureToolkitLibsVersion = "0.36.1"
        azureToolkitIdeLibsVersion = "0.36.1"
        azureToolkitUtilsVersion = "3.80.2"
    }

    dependencyManagement {
        imports {
            mavenBom 'com.microsoft.azure:azure-toolkit-libs:' + azureToolkitLibsVersion
            mavenBom 'com.microsoft.azure:azure-toolkit-ide-libs:' + azureToolkitIdeLibsVersion
        }
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.projectlombok/lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'com.microsoft.azure:azure-toolkit-common-lib'
        aspect 'com.microsoft.azure:azure-toolkit-common-lib'
        compileOnly 'org.jetbrains:annotations'
    }

    configurations {
        implementation.exclude module:'slf4j-api'
        implementation.exclude module:'log4j'
        implementation.exclude module:'stax-api'
        implementation.exclude module:'groovy-xml'
        implementation.exclude module:'groovy-templates'
        cucumberRuntime {
            extendsFrom testImplementation
        }
    }

    buildSearchableOptions.onlyIf {false}

    intellij {
        version = intellij_version
    }
}

subprojects {
    buildPlugin { enabled = false }
    runIde { enabled = false }
    prepareSandbox { enabled = false }
    prepareTestingSandbox { enabled = false }
    buildSearchableOptions { enabled = false }
    patchPluginXml { enabled = false }
    publishPlugin { enabled = false }
    verifyPlugin { enabled = false }

    buildSearchableOptions.onlyIf { false }
}

intellij {
    pluginName = 'azure-intellij-plugin-base'
    version = intellij_version
    plugins = ['java', 'maven', 'maven-model', 'gradle', dep_plugins]
    downloadSources = Boolean.valueOf(sources)
}

dependencies {
    implementation 'com.microsoft.azure:azure-toolkit-auth-lib'
    implementation 'com.microsoft.azure:azure-toolkit-ide-common-lib'

    implementation project(path: ':azure-intellij-plugin-lib', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-lib-java', configuration: 'instrumentedJar')
    implementation project(path: ':azure-intellij-plugin-service-explorer', configuration: 'instrumentedJar')

    def modules = IntellijPluginModules.split(",")
    modules.each { m ->
        implementation project(':' + m)
    }

    aspect "com.microsoft.azure:azure-toolkit-common-lib", {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
        exclude group: "com.squareup.okhttp3", module: "okhttp-urlconnection"
        exclude group: "com.squareup.okhttp3", module: "logging-interceptor"
    }
}

wrapper() {
    gradleVersion = '7.5.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

String timestamp = (new Date()).format('yyyyMMddHHmmss')
ext.getPatchedVersion = {
    if (Boolean.valueOf(needPatchVersion) || pluginVersion.endsWith("SNAPSHOT")) {
        if (pluginVersion.endsWith("SNAPSHOT")) {
            def fixedPluginVersion = pluginVersion.split("-")
            return "${fixedPluginVersion[0]}-${intellijDisplayVersion}-SNAPSHOT.${timestamp}"
        } else {
            return "${pluginVersion}-${intellijDisplayVersion}-BETA.${timestamp}"
        }
    } else {
        return "${pluginVersion}-${intellijDisplayVersion}"
    }
}

patchPluginXml {
    version = getPatchedVersion()
    sinceBuild = patchPluginXmlSinceBuild
}

buildPlugin {
    archiveVersion = getPatchedVersion()
}
