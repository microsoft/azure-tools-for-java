import org.gradle.internal.os.OperatingSystem
import org.ajoberstar.grgit.*

plugins {
  id "org.ajoberstar.grgit" version "4.1.0"
}

def gradleExec = file(OperatingSystem.current().isWindows() ? "gradlew.bat" : "gradlew")
def mavenExec = file(OperatingSystem.current().isWindows() ? "mvnw.cmd" : "mvnw")
def IJ_VERSION_LATEST = IJ_VERSION_MINOR?.trim()?.isEmpty() ? IJ_VERSION_MAJOR : "${IJ_VERSION_MAJOR}.${IJ_VERSION_MINOR}"

def mavenArgs = { conf ->
    List<String> mvnArgs = (forceClean.toBoolean() ? [ 'clean' ] : []) + conf.goals + [
            '-B',
            '-T 1C',
            '-Didea.io.use.fallback=true'   // A workaround to remove Maven Kotlin script exec warnings on Windows
    ]

    if (conf.pom != null) {
        mvnArgs << "-f" << conf.pom.toString()
    }

    if (skipTest.toBoolean()) {
        mvnArgs << "-Dmaven.test.skip=true"
    }

    if (skipCheckstyle.toBoolean()) {
        mvnArgs << "-Dcheckstyle.skip=true"
    }

    boolean isMavenQuiet = mavenQuiet.equalsIgnoreCase("auto")
            ? (!(logger.isInfoEnabled() || logger.isDebugEnabled()))
            : mavenQuiet.toBoolean()

    if (isMavenQuiet) {
        mvnArgs << "-q"
    }

    mvnArgs
}

ext.maven = { Closure mavenClosure ->
    def envVars = [:]
    envVars['JAVA_OPTS'] = "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m"
    envVars['JDK_JAVA_OPTIONS'] = "--add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.time=ALL-UNNAMED"
    exec {
        executable mavenExec
        args mavenArgs(configure([:], mavenClosure))
    }
     tasks.withType(Exec) { environment << envVars }
}

task buildToolkitsLib {
    doLast {
        logger.info('Building Toolkits Lib ...')
        def tempDir = File.createTempDir()
        tempDir.deleteOnExit()
        Grgit.clone(dir: file(tempDir), uri: 'https://github.com/microsoft/azure-maven-plugins.git')

        maven {
            goals = "install"
            pom = file("${tempDir}/azure-toolkit-libs/pom.xml")
        }
    }
}

task prepareBicepSupport {
    doLast {
        logger.info('Building Lsp4intellij ...')
        def bicepDir = File.createTempDir()
        bicepDir.deleteOnExit()
        Grgit.clone(dir: file(bicepDir), uri: 'https://github.com/Flanker32/lsp4intellij-bicep.git')
        exec {
            workingDir file(bicepDir)
            executable gradleExec
            args 'publishToMavenLocal'
        }

        logger.info('Downloading bicep language server ...')
        def f = new File('PluginsAndFeatures/azure-toolkit-for-intellij/azure-intellij-plugin-bicep/src/main/resources/bicep-langserver.zip')
        if (!f.exists()) {
            new URL('https://aka.ms/java-toolkit-bicep-ls').withInputStream{ i -> f.withOutputStream{ it << i }}
        }
    }
}

task buildUtils {
    dependsOn buildToolkitsLib
    doLast {
        logger.info('Building Utils ...')
        maven {
            goals = "install"
            pom = file('Utils/pom.xml')
        }
    }
}

task buildAdditionalLibrary {
    dependsOn buildUtils

    doLast {
        maven {
            goals = "install"
            pom = file('PluginsAndFeatures/AddLibrary/AzureLibraries/pom.xml')
        }
    }
}

task buildEclipse {
    dependsOn buildUtils, buildAdditionalLibrary, prepareBicepSupport

    doLast {
        logger.info('Building Eclipse plugin ...')
        maven {
            goals = "install"
            pom = file('PluginsAndFeatures/azure-toolkit-for-eclipse/pom.xml')
        }

        copy {
            from file('PluginsAndFeatures/azure-toolkit-for-eclipse/WindowsAzurePlugin4EJ/target')
            include 'WindowsAzurePlugin4EJ*.zip'
            into file(ARTIFACTS_DIR)
        }
    }
}

task buildIntelliJ {
    dependsOn buildUtils, buildAdditionalLibrary

    doLast {
        logger.info('Building IntelliJ plugin ...')

        def ijBuildArgs = (forceClean.toBoolean() ? [ 'clean' ] : []) +
                (skipTest.toBoolean() ? [] : [ 'test' ]) + [
                'buildPlugin',
                // 'spotbugsMain',
                // 'bundleBuildIdeaZip',
                '-s',
                "-Pintellij_version=IC-$IJ_VERSION_LATEST",
                "-Pdep_plugins=org.intellij.scala:$IJ_SCALA_VERSION_LATEST"
        ]

        if (INJECT_INTELLIJ_VERSION.toBoolean()) {
            ijBuildArgs << "-PpatchPluginXmlSinceBuild=$IJ_VERSION_MAJOR_BUILD"
        }

        // Transfer root Gradle start parameters into IntelliJ Gradle build
        if (logger.isInfoEnabled()) {
            ijBuildArgs << '--info'
        }

        if (logger.isDebugEnabled()) {
            ijBuildArgs << '--debug'
        }

        switch (gradle.startParameter.showStacktrace) {
            case ShowStacktrace.ALWAYS:
                ijBuildArgs << '--stacktrace'
                break
            case ShowStacktrace.ALWAYS_FULL:
                ijBuildArgs << '--full-stacktrace'
                break
            default:
                break
        }

        exec {
            workingDir file('PluginsAndFeatures/azure-toolkit-for-intellij')
            executable gradleExec
            args ijBuildArgs
        }

        copy {
            from file('PluginsAndFeatures/azure-toolkit-for-intellij/build/distributions/')
            into file(ARTIFACTS_DIR)
            rename '(.*).zip', '$1' + "-${IJ_VERSION_LATEST}.zip"
        }
    }
}

task buildAll {
    dependsOn buildUtils, buildAdditionalLibrary, buildEclipse, buildIntelliJ

    doLast {
        logger.info("ALL BUILD SUCCESSFUL")
    }
}

wrapper() {
    gradleVersion = '6.9'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

defaultTasks 'buildAll'